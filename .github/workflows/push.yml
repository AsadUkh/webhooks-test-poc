name: Upload Changed Files to Cloudinary

# on:
#   push:
#     branches:
#       - main
  # pull_request:
  #   branches:
  #     - main

jobs:
  upload_files_to_cloudinary:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code with full history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch full commit history for accurate diff

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Use Node.js 18 or specify the version you need

      # # Install dependencies
      # - name: Install dependencies
      #   run: |
      #     npm install  # Install the necessary dependencies (ensure package.json exists)

      # Upload changed files to Cloudinary
      - name: Upload changed files to Cloudinary
        run: |
          # Get list of modified files in the commit (including renames)
          MODIFIED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          
          # Get list of new files added to the staging area (files that are added but not yet committed)
          NEW_FILES=$(git ls-files --others --exclude-standard)

          # Combine both lists (modified and new files)
          FILES_CHANGED="$MODIFIED_FILES $NEW_FILES"
          
          # Filter out node_modules and other unwanted files
          FILES_CHANGED=$(echo "$FILES_CHANGED" | grep -vE '(^node_modules/|^\.git/)')

          # Debugging: Show filtered list
          echo "Files to upload: $FILES_CHANGED"

          # Iterate over the changed files and upload them to Cloudinary
          for FILE in $FILES_CHANGED; do
            if [[ -f "$FILE" ]]; then
              echo "Uploading $FILE to Cloudinary..."

              # Upload the file to Cloudinary (both empty and non-empty)
              curl -X POST "https://api.cloudinary.com/v1_1/${{ secrets.CLOUDINARY_CLOUD_NAME }}/raw/upload" \
                -F "file=@$FILE" \
                -F "upload_preset=ml_default" \
                -F "public_id=$FILE" \
                -u "${{ secrets.CLOUDINARY_API_KEY }}:${{ secrets.CLOUDINARY_API_SECRET }}"
            else
              echo "No valid file found for: $FILE"
            fi
          done
